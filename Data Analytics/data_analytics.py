# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AjvZhpbyxOWOVujMu5mR08sQfivebAvL
"""

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('QueryResults.csv', names=['DATE', 'TAG', 'POSTS'], header=0)

# df = pd.DataFrame({'Name': ['Amidu', 'Juliet', 'Evelyn'], 'Age': [29, 27, 25]})
# highest_potential = df.assign(Most = df['Mid-Career 90th Percentile Salary'] * 2)
# highest_potential.to_csv('salaries-by-college-major.csv', index=False)
# highest = df.sort_values('Most', ascending=False)
# highest[['Undergraduate Major', 'Mid-Career 90th Percentile Salary', 'Most_Potential', 'Most']].head()

# df.groupby('Group').count()

# df.groupby('Group').mean()

# pd.options.display.float_format = '{:,.2f}'.format
# df.groupby('Group').mean()

# df.count().isna()
# df.count().dropna()

# The first five rows
# df.head()

# The last five rows
# df.tail()

# Retrieves names of all columns in the dataframe 
# df.columns

# Number of rows and columns
# df.shape

# Number of entries in each column of the dataframe
# df.count()

# The total sum of post per language (Language name is given 'TAG')
# df.groupby('TAG').sum()

# Programming language with the highest total number of posts of all times
# df.loc[df['POSTS'].idxmax()]

# Number of months of data existing per language
# df.groupby('TAG').count()

# Using pandas to change date format from a String to a date time object
# df['DATE'][1]
# type(df['DATE'][1])
# print(pd.to_datetime(df.DATE[1]))
# type(pd.to_datetime(df.DATE[1]))
# # converting the entire column
# df.DATE = pd.to_datetime(df.DATE)
# df.head()

# Data Manipulation
# test_df = pd.DataFrame({'Age': ['Young', 'Young', 'Young', 'Young', 'Old', 'Old', 'Old'],
#                         'Actor': ['Jack', 'Arnold', 'Keanu', 'Sylvester', 'Jack', 'Arnold', 'Keanu'],
#                         'Power': [100, 80, 25, 50, 99, 75, 5]})
# test_df

# pivoted_df = test_df.pivot(index='Age', columns='Actor', values='Power')
# pivoted_df

# Test
reshaped_df = df.pivot(index='DATE', columns='TAG', values='POSTS')
reshaped_df.shape

reshaped_df.columns

# reshaped_df.head()

# reshaped_df.count()

# Filling NaN (Not a Value) with default values
# reshaped_df.fillna(0, inplace=True)

# reshaped_df.head()

# reshaped_df.isna().values.any()

# Data Visualization with Matplotlib
# Plotting a single Language (Java) on a chart
# plt.plot(reshaped_df.index, reshaped_df.java)

# # Alternative way of selecting the column
# plt.plot(reshaped_df.index, reshaped_df['java'])

# plt.figure(figsize=(16,10))
# plt.xticks(fontsize=14)
# plt.yticks(fontsize=14)
# plt.xlabel('Date', fontsize=14)
# plt.ylabel('Number of Posts', fontsize=14)
# plt.ylim(0, 35000)
# plt.plot(reshaped_df.index, reshaped_df.java)

# # Showing two lines for two languages (Java & Python) on the same chart
# plt.figure(figsize=(16,10)) # make chart larger
# plt.xticks(fontsize=14)
# plt.yticks(fontsize=14)
# plt.xlabel('Date', fontsize=14)
# plt.ylabel('Number of Posts', fontsize=14)
# plt.ylim(0, 35000)

# plt.plot(reshaped_df.index, reshaped_df.java)
# plt.plot(reshaped_df.index, reshaped_df.python)

# Plotting all languages using for loop
for column in reshaped_df.columns:
    all_languages = plt.plot(reshaped_df.index, reshaped_df[column])

plt.figure(figsize=(16,10))
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Number of Posts', fontsize=14)
plt.ylim(0, 35000)

for column in reshaped_df.columns:
    plt.plot(reshaped_df.index, reshaped_df[column], 
             linewidth=3, label=reshaped_df[column].name)

reshaped_data = plt.legend(fontsize=16)

# Time Series _ The window is number of observations that are averaged
roll_df = reshaped_df.rolling(window=6).mean()

plt.figure(figsize=(16,10))
plt.xticks(fontsize=14)
plt.yticks(fontsize=14)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Number of Posts', fontsize=14)
plt.ylim(0, 35000)

# plot the roll_df instead
for column in roll_df.columns:
    plt.plot(roll_df.index, roll_df[column], 
             linewidth=3, label=roll_df[column].name)

time_series_avg = plt.legend(fontsize=16)

